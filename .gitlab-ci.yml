stages:
  - build # Build Docker Image
  - deploy  # Deploy Docker image to server

variables: # Variables for Container images
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind # Docker in Docker
  script:
    # Build Docker image defined in Dockerfile (define path with -f foldername)
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .

    # Login to Container Registry
      # User: gitlab-ci-token / default username for GitLab CI/CD jobs
      # PW: $CI_BUILD_TOKEN / variable provided by GitLab CI/CD that contains token
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

    # Push Docker image to Container Registry
    - docker push $TAG_COMMIT # Can be used for debugging
    - docker push $TAG_LATEST # Used for deployment

deploy:
  stage: deploy
  image: alpine:latest
  variables: # Variables for SSH
    IP: "100.26.219.224"
    USER: "ubuntu"
  when: manual  # Manually trigger deploy stage
  before_script:
    - apk update && apk add openssh-client # Install OpenSSH Client
    - chmod og= $ID_RSA # Change permission of SSH Key
  script:
    # Login to Container Registry
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $USER@$IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"

    # Pull image from Container Registry
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $USER@$IP "docker pull $TAG_LATEST"

    # Remove old container
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $USER@$IP "docker container rm -f jklug-website || true"

    # Run new container from image
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $USER@$IP "docker run -d -p 80:80 --name jklug-website $TAG_LATEST"

  only: # Optional: Trigger stage only in main branch
    - main

